const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/_app/immutable/entry/app.Dhc_Ew-Q.js",s+"/_app/immutable/nodes/0.DkMLLy4h.js",s+"/_app/immutable/assets/0.CL0jEbKQ.css",s+"/_app/immutable/nodes/1.D-ZFAXNu.js",s+"/_app/immutable/nodes/2.oe9CAEQ7.js",s+"/_app/immutable/assets/2.DFckzZQ0.css",s+"/_app/immutable/nodes/3.BFE--pFu.js",s+"/_app/immutable/assets/3.BYSuNNe_.css",s+"/_app/immutable/nodes/4.rZVx3jHY.js",s+"/_app/immutable/assets/4.BFHAGTpN.css",s+"/_app/immutable/assets/BottomBar.sKncwvRr.css",s+"/_app/immutable/chunks/BottomBar.BIDcyHu6.js",s+"/_app/immutable/chunks/appearance._Pf7IuiS.js",s+"/_app/immutable/assets/dictionary.BXdUqk1m.css",s+"/_app/immutable/chunks/dictionary.D-f1v8xe.js",s+"/_app/immutable/chunks/disclose-version.DMb1MWqK.js",s+"/_app/immutable/chunks/entry.BmfvafHv.js",s+"/_app/immutable/chunks/index-client.ZNqWNHHH.js",s+"/_app/immutable/chunks/index.B9HqKKT-.js",s+"/_app/immutable/chunks/index.BpS-TiET.js",s+"/_app/immutable/chunks/legacy.CAdgRAij.js",s+"/_app/immutable/chunks/persistent-stores.BI_I_XZi.js",s+"/_app/immutable/chunks/props.BU03OgPP.js",s+"/_app/immutable/chunks/render.CfWNEYHW.js",s+"/_app/immutable/assets/scores.JdoJDsOM.css",s+"/_app/immutable/chunks/scores.DHawOXJF.js",s+"/_app/immutable/chunks/settings.DiEyKd8D.js",s+"/_app/immutable/chunks/store.OBsKuDGv.js",s+"/_app/immutable/chunks/this.BB9oy7Yh.js",s+"/_app/immutable/chunks/utils.CzggQQeO.js",s+"/_app/immutable/entry/start.lvhd1eoG.js"],o=[s+"/favicon.png",s+"/manifest.json",s+"/screenshots/play.png",s+"/screenshots/setup.png"],r="1736598502725",p=`cache-${r}`,u=new Set([...l,...o]),c=self;c.addEventListener("install",e=>{e.waitUntil(caches.open(p).then(a=>(console.log("Caching static assets..."),a.addAll([...u]))).then(()=>{c.skipWaiting()}))});c.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(a=>Promise.all(a.map(t=>{if(t!==p)return console.log(`Deleting old cache: ${t}`),caches.delete(t)}))).then(()=>{c.clients.claim()}))});c.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;const a=new URL(e.request.url),t=u.has(a.pathname);e.respondWith((async()=>{try{if(t){const m=await caches.match(e.request);if(m)return m}const n=await fetch(e.request);return(await caches.open(p)).put(e.request,n.clone()),n}catch(n){const i=await caches.match(e.request);if(i)return i;throw n}})())});
