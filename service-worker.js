const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/_app/immutable/entry/app.Dh7kNsQJ.js",s+"/_app/immutable/nodes/0.CyVDX5eA.js",s+"/_app/immutable/assets/0.G23u2aUf.css",s+"/_app/immutable/nodes/1.CXT9rv3s.js",s+"/_app/immutable/nodes/2.BaNdIhZZ.js",s+"/_app/immutable/assets/2.DFckzZQ0.css",s+"/_app/immutable/nodes/3.CGCVQaFj.js",s+"/_app/immutable/assets/3.V-GMReEg.css",s+"/_app/immutable/nodes/4.boqNXGHJ.js",s+"/_app/immutable/assets/4.BV4RL81h.css",s+"/_app/immutable/nodes/5.XeigYzb0.js",s+"/_app/immutable/assets/5.B1C8QOgE.css",s+"/_app/immutable/assets/BottomBar.sKncwvRr.css",s+"/_app/immutable/chunks/BottomBar.boK70mLU.js",s+"/_app/immutable/chunks/appearance.C7d5e623.js",s+"/_app/immutable/chunks/disclose-version.CYEZbGRd.js",s+"/_app/immutable/chunks/entry.RhCFuVAf.js",s+"/_app/immutable/assets/glyphs.BXdUqk1m.css",s+"/_app/immutable/chunks/glyphs.BZE3epMA.js",s+"/_app/immutable/chunks/index-client.SJPFcUSQ.js",s+"/_app/immutable/chunks/index.C_B4kDz-.js",s+"/_app/immutable/chunks/index.DrMsbBsN.js",s+"/_app/immutable/chunks/legacy.Dizh_e1X.js",s+"/_app/immutable/chunks/persistent-stores.Cu6bZ0Mm.js",s+"/_app/immutable/chunks/props.Ce0yfSwg.js",s+"/_app/immutable/chunks/render.BS6rv_sO.js",s+"/_app/immutable/chunks/settings.kxs38m7w.js",s+"/_app/immutable/chunks/store.DLGdLQ_h.js",s+"/_app/immutable/chunks/this.DCzmdEcR.js",s+"/_app/immutable/assets/times.JdoJDsOM.css",s+"/_app/immutable/chunks/times.8riW38Ab.js",s+"/_app/immutable/chunks/utils.DXvTgAFw.js",s+"/_app/immutable/entry/start.D6aqvi2T.js"],o=[s+"/favicon.png",s+"/manifest.json",s+"/screenshots/play.png",s+"/screenshots/setup.png"],h="1736807917089",i=`cache-${h}`,u=new Set([...l,...o]),p=self;p.addEventListener("install",e=>{e.waitUntil(caches.open(i).then(a=>(console.log("Caching static assets..."),a.addAll([...u]))).then(()=>{p.skipWaiting()}))});p.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(a=>Promise.all(a.map(t=>{if(t!==i)return console.log(`Deleting old cache: ${t}`),caches.delete(t)}))).then(()=>{p.clients.claim()}))});p.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;const a=new URL(e.request.url),t=u.has(a.pathname);e.respondWith((async()=>{try{if(t){const m=await caches.match(e.request);if(m)return m}const n=await fetch(e.request);return(await caches.open(i)).put(e.request,n.clone()),n}catch(n){const c=await caches.match(e.request);if(c)return c;throw n}})())});
